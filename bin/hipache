#!/usr/bin/env sh
':' //; exec "$(command -v nodejs || command -v node)" --expose-gc --always-compact -- "$0" "$@"

'use strict';

var fs = require('fs'),
    path = require('path'),
    cluster = require('cluster'),
    util = require('util'),
    argv = require('minimist')(process.argv.slice(2)),
    Config = require('../lib/config/config'),
    master = require('../lib/master'),
    Worker = require('../lib/worker');

var help = [
    'usage: hipache [options]',
    '',
    'Starts a hipache server',
    '',
    'options:',
    '   -c, --config CONFIGFILE     Location of the configuration file',
    "   -d, --dry                   Test configuration and exit (doesn't actually start hipache)",
    '   -h, --help                  Display help'
].join('\n');

if (argv.h || argv.help) {
    return util.puts(help);
}

var configFile = argv.c || argv.config;

if (!configFile) {
    configFile = path.resolve(__dirname, '..', 'config', 'config.json');
    if (process.env.SETTINGS_FLAVOR !== undefined) {
        configFile = configFile.replace(/\.json$/, '_' + process.env.SETTINGS_FLAVOR + '.json');
    }
}

var loadConfig = function(data) {
    if (typeof data === 'string') {
        data = data.replace(/\{\{(HIPACHE_.+?)\}\}/gm, function(match, variable) {
            if (typeof process.env[variable] === 'string') {
                return process.env[variable].replace(/\n/gm, '\\n');
            }
            return process.env[variable];
        });
    }
    console.log('CONFIG:');
    console.log(data);

    var config;
    try {
        config = new Config(data);
    } catch (e) {
        util.log('Failed loading your configuration!');
        throw e;
    }

    // Wait for configuration to say ready...
    config.once('ready', function () {

        if (argv.d || argv.dry) {
            util.log('Configuration file looks ok. Here is the result:');
            util.log(config.inspect());
            return;
        }

        if (cluster.isMaster) {
            // Run the master
            var m = master(config);
            m.run();
            util.log('Server is running.');
        } else {
            // Run the worker
            var w = new Worker(config);
            w.run();
        }
    });
}


if (typeof process.env.HIPACHE_CONFIG === 'string' && process.env.HIPACHE_CONFIG.trim().length > 2) {
    util.log('Loading config from ENVIRONMENT');

    loadConfig(process.env.HIPACHE_CONFIG);
} else {
    util.log('Loading config from ' + configFile);

    fs.readFile(configFile, function (err, data) {
        if (err) {
            throw new Error('Couldn\'t locate requested config file at: ' + configFile);
        }

        loadConfig(data);
    });
}
